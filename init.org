#+TITLE: Emacs configuration file
#+AUTHOR: Artjom Vejsel
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Credits

Inspired by [[https://github.com/vyorkin/emacs.d][vyorkin's]] setup.

* Setup

- Symlink =init.org= to =~/.emacs.d/init.org=
- Symlink =init.el= to =~/.emacs.d/init.el=

#+BEGIN_SRC sh :tangle no
ln -sf $(pwd)/init.org ~/.emacs.d/init.org
ln -sf $(pwd)/init.el ~/.emacs.d/init.el
#+END_SRC

On the first run Emacs will install some packages. It's best to restart Emacs after that process is done for the first time.

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC

When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

* Config

[[https://www.emacswiki.org/emacs/LexicalBinding][Lexical binding]] for the init-file is needed, it can be specified in the header.
This is the first line of the actual configuration.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

Tangle and compile this file on save automatically:

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (file-truename (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
;;    (byte-compile-file (concat user-emacs-directory "init.el"))
     )))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

** Use package

Initialize package and add package archives.

#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC

Set ~package-enable-at-startup~ to ~nil~ for slightly faster startup.
See [[https://www.reddit.com/r/emacs/comments/1rdstn/set_packageenableatstartup_to_nil_for_slightly/][this post on Reddit]].

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
#+END_SRC

Use MELPA as shown [[https://melpa.org/#/getting-started][here]].

#+BEGIN_SRC emacs-lisp
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to disable/enable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;; (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
#+END_SRC

It is ok to use both ~package-initialize~ and ~use-package~ for a well behaved
package: ~package-initialize~ will not load the whole package, but only autoload
functions selected by the package author.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Install [[https://github.com/jwiegley/use-package][use-package]].

Install missing packages automatically if not already present on the system and
be less verbose.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))

(setq
 use-package-always-ensure t
 use-package-verbose nil)
#+END_SRC

** Warnings

Decrease the =obsolete= warnings annoyance level.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not obsolete))
#+END_SRC

This helps to get rid of =functions might not be defined at runtime= warnings.
See [[https://github.com/jwiegley/use-package/issues/590][this issue]] for details.

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC

** Defaults
*** Backups & lock files

Don't create lock files.

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

I don't care about auto save and backup files.
Also I don't like distracting alarms.

#+BEGIN_SRC emacs-lisp
(setq
 make-backup-files nil        ; disable backup files
 auto-save-list-file-name nil ; disable .saves files
 auto-save-default nil        ; disable auto saving
 ring-bell-function 'ignore)  ; turn off alarms completely
#+END_SRC

*** Misc

Use =y/n= instead of =yes/no=.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Don't prompt for non existent name when creating new buffers.

#+BEGIN_SRC emacs-lisp
(setq-default confirm-nonexistent-file-or-buffer t)
#+END_SRC

Enable =recentf-mode= and remember a lot of files.

#+BEGIN_SRC emacs-lisp
(setq
 recentf-auto-cleanup 'never
 recentf-max-menu-items 0
 recentf-max-saved-items 300
 recentf-filename-handlers '(file-truename abbreviate-file-name))

(recentf-mode 1)
#+END_SRC

Automatically save place in each file.

#+BEGIN_SRC emacs-lisp
(setq
 save-place-forget-unreadable-files t
 save-place-limit 200)

(save-place-mode 1)
#+END_SRC

** Location

Set the location name and coordinates.

#+BEGIN_SRC emacs-lisp
(setq
 calendar-location-name "Moscow, RU"
 calendar-latitude 55.76
 calendar-longitude 37.78)
#+END_SRC

** Core
*** Utils

Utility functions.

#+BEGIN_SRC emacs-lisp
(defun my/emacs-path (path)
  "Expands `path` with Emacs home directory."
  (expand-file-name path user-emacs-directory))

(defun my/tmp-path (path)
  "Expand `path` with Emacs temporary directory."
  (my/emacs-path (format "tmp/%s" path)))

(defun my/lisp-path (path)
  "Expand `path` with Emacs `/lisp` directory."
  (my/emacs-path (format "lisp/%s" path)))
#+END_SRC

*** Builtin
**** Files

On save/write file:
- Automatically delete trailing whitespace.
- Silently put a newline at the end of file if there isn't already one there.

#+BEGIN_SRC emacs-lisp
(use-package files
 :ensure nil
 :commands
 (generate-new-buffer
  executable-find
  file-name-base
  file-name-extension)
 :custom
 (require-final-newline t)
 :hook
 (before-save . delete-trailing-whitespace))
#+END_SRC

**** Reverting

Enable and diminish [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Autorevert.html#Autorevert][autorevert]] mode.

#+BEGIN_SRC emacs-lisp
(use-package autorevert
 :ensure nil
 :custom
 ;; Don't generate any messages whenever a buffer is reverted
 ;;(auto-revert-verbose nil)
 ;; Operate on non-file-visiting buffers
 (global-auto-revert-non-file-buffers t)
 :config
 ;; Operate on file-visiting buffers
 (global-auto-revert-mode)
 :diminish auto-revert-mode)
#+END_SRC

**** Uniquify

Using =reverse= naming method, buffers visiting the files =/u/rms/tmp/Makefile= and =/usr/projects/zaphod/Makefile= would be named =‘Makefile\tmp’= and =‘Makefile\zaphod’=. It puts the directory names in reverse order, so that =/top/middle/file= becomes =‘file\middle\top’=.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
 :ensure nil
 :custom
 ;; use "qux\bar\foo"
 (uniquify-buffer-name-style 'reverse))
#+END_SRC

**** Frame

- Disable blinking cursor.
- Disable suspending on =C-z=.

#+BEGIN_SRC emacs-lisp
(use-package frame
 :ensure nil
 :config
 (blink-cursor-mode 0)
 :bind
 ("C-z" . nil))
#+END_SRC

**** Delsel

**** Simple

**** Pixel scroll

**** Prog mode

**** IBuffer

**** Mule

**** ETags

**** Man

Format man pages [[https://unix.stackexchange.com/a/274795][properly]].

#+BEGIN_SRC emacs-lisp
(use-package man
 :ensure nil
 :custom-face
 (Man-overstrike ((t (:inherit font-lock-type-face :weight bold))))
 (Man-underline ((t (:inherit font-lock-keyword-face :slant italic)))))
#+END_SRC

**** Calendar

#+BEGIN_SRC emacs-lisp
(use-package calendar
 :ensure nil
 :custom
 (calendar-week-start-day 1))
#+END_SRC

**** Term

Disable mandatory parameter to =term= function.

#+BEGIN_SRC emacs-lisp
(use-package term
 :ensure nil
 :config
 (fset 'origterm
  (symbol-function 'term))
 (defun term (&optional term)
  (interactive)
  (origterm
   (or term
       explicit-shell-file-name
       shell-file-name))))
#+END_SRC

**** Face remap

Diminish remap mode.

#+BEGIN_SRC emacs-lisp
(use-package face-remap
 :commands
 (buffer-face-mode-face
  face-remap-add-relative
  buffer-face-mode)
 :ensure nil
 :diminish buffer-face-mode)
#+END_SRC

**** CC mode

** UI
*** Basics.

#+BEGIN_SRC emacs-lisp
(setq
 inhibit-startup-screen t ; Don't show splash screen
 use-dialog-box nil       ; Disable dialog boxes
 use-file-dialog nil)     ; Disable file dialog
#+END_SRC

*** Scroll

*** UI elements

Hide toolbar and scrollbars.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))
#+END_SRC

I generally prefer to hide the menu bar, but doing this on OS X simply makes it
update unreliably in GUI frames, so we make an exception.

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (set-frame-parameter frame 'menu-bar-lines
                                     (if (display-graphic-p frame) 1 0))))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1)))
#+END_SRC

*** Cursor

Show full path in the title bar.

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+END_SRC

*** Fringe

*** Window-divider

*** Line-spacing

*** Startup

Start maximized.

#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC

*** Mode-line

*** Time

#+BEGIN_SRC emacs-lisp
(use-package time
 :ensure nil
 :custom
 (display-time-default-load-average nil)
 (display-time-24hr-format t)
 :config
 (display-time-mode t))
#+END_SRC

** Editor
*** Customizations

I don't use the customizations UI. Lets keep those automated
customizations in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][separate file]]. The ~'noerror~ argument passed to
load prevents errors if the file doesn’t exist.

#+BEGIN_SRC emacs-lisp
(setq custom-file (my/emacs-path "custom.el"))
(load custom-file 'noerror)
#+END_SRC

*** Basics

Some basic things.

#+BEGIN_SRC emacs-lisp
(setq
 sentence-end-double-space nil  ; sentences should end in one space
 initial-scratch-message nil    ; empty scratch buffer
 enable-recursive-minibuffers t ; allow minibuffer commands in the minibuffer
 echo-keystrokes 0.1            ; show keystrokes right away, don't show the message in the scratch buffer
 ns-use-native-fullscreen nil   ; disable native fullscreen support
)
#+END_SRC

*** Tabs & spaces

- Allow to use tabs for indent
- One tab is 4 spaces.

#+BEGIN_SRC emacs-lisp
(setq-default
 indent-tabs-mode t
 tab-width 4)
#+END_SRC

Display line and column numbers in the mode-line.

#+BEGIN_SRC emacs-lisp
(setq
  line-number-mode t
  column-number-mode t)
#+END_SRC

*** Line wrapping

Long lines will show a continuation character in the right margin at the
window’s edge to indicate that next line is the continuation of current.

#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines nil)
#+END_SRC

Break line at =N= characters.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

Enable automatic line breaking for all text mode buffers.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Always wrap lines.

#+BEGIN_SRC emacs-lisp :tangle no
;; (global-visual-line-mode)
#+END_SRC

** Benchmarking

** Quelpa

** Use-package plugins

** Font
*** Faces

#+BEGIN_SRC emacs-lisp
(use-package faces
  :ensure nil
  :custom
  (face-font-family-alternatives
   '(("Ricty Diminished L")))
  :init
  (set-face-attribute
   'default nil
   :family (caar face-font-family-alternatives)
   :weight 'regular
   :height 280
   :width 'semi-condensed)
  (set-fontset-font
   "fontset-default"
   'cyrillic
   (font-spec :registry "iso10646-1" :script 'cyrillic)))
#+END_SRC

** Theme

Use [[https://github.com/arcticicestudio/nord-emacs][Nord Emacs theme]].

#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :config
  (load-theme 'nord t))
#+END_SRC

** Key bindings

** Behavior
*** Trashing

*** Automatic updates

Automatically update Emacs packages. Useful if you're working in multiple
machines and tend to forget to manually update packages from time to time.

The main idea is that you set a desired periodicity for the updates, and when
you start Emacs, the packages will be automatically updated if enough days have
passed since the last update.

See the [[https://github.com/rranelli/auto-package-update.el][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
 :config
 (setq
  auto-package-update-delete-old-versions t ; Delete residual old version directory when updating
  auto-package-update-interval 1)           ; Update packages every day
 (auto-package-update-maybe)                ; Check for updates on startup
 (auto-package-update-at-time "06:00"))     ; Update at =6:00=
#+END_SRC

*** Clipboard

*** Copy as

*** Extra whitespace trimming

Unobtrusively trim extraneous whitespace only in lines edited.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
 :config
 (ws-butler-global-mode)
 :diminish ws-butler-mode)
#+END_SRC

*** Aggressive indent

*** Auto-save buffers

Save buffers when they lose focus.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package super-save
 :config
 (super-save-mode +1)
 :diminish)
#+END_SRC

*** Auto read-only

*** Zoom

*** Transparency

*** Go to last change

*** Fullframe

*** Folding

*** Which key

*** Free keys

Show free bindings in current buffer. To use, call the command =M-x free-keys=.
See the [[https://github.com/Fuco1/free-keys][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package free-keys)
#+END_SRC

*** Sudo edit

Utilities for opening files with sudo. Just type =M-x sudo= on an already opened
read-only file.

#+BEGIN_SRC emacs-lisp
(use-package sudo-edit)
#+END_SRC

*** Try

Allows you to try out Emacs packages without installing them. Just type =M-x try=.

#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

*** Restart

** Appearance
*** Customization

*** Page break lines

Display ugly =^L= page breaks as tidy horizontal lines.

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
 :init
 (global-page-break-lines-mode 1)
 :diminish page-break-lines-mode)
#+END_SRC

*** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
 :commands
 (rainbow-delimiters-unmatched-face)
 :config
 ;; Pastels..
 (set-face-attribute 'rainbow-delimiters-depth-1-face nil :foreground "#78c5d6")
 (set-face-attribute 'rainbow-delimiters-depth-2-face nil :foreground "#bf62a6")
 (set-face-attribute 'rainbow-delimiters-depth-3-face nil :foreground "#459ba8")
 (set-face-attribute 'rainbow-delimiters-depth-4-face nil :foreground "#e868a2")
 (set-face-attribute 'rainbow-delimiters-depth-5-face nil :foreground "#79c267")
 (set-face-attribute 'rainbow-delimiters-depth-6-face nil :foreground "#f28c33")
 (set-face-attribute 'rainbow-delimiters-depth-7-face nil :foreground "#c5d647")
 (set-face-attribute 'rainbow-delimiters-depth-8-face nil :foreground "#f5d63d")
 (set-face-attribute 'rainbow-delimiters-depth-9-face nil :foreground "#78c5d6")
 ;; Make unmatched parens stand out more
 (set-face-attribute
  'rainbow-delimiters-unmatched-face nil
   :foreground 'unspecified
   :inherit 'show-paren-mismatch
   :strike-through t)
 (set-face-foreground 'rainbow-delimiters-unmatched-face "magenta")
 :hook
 (prog-mode . rainbow-delimiters-mode)
 :diminish rainbow-delimiters-mode)
#+END_SRC

*** Rainbow identifiers

#+BEGIN_SRC emacs-lisp
(use-package rainbow-identifiers
 :hook
 (prog-mode . rainbow-identifiers-mode)
 :diminish rainbow-identifiers-mode)
#+END_SRC

*** Rainbow mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
 :diminish rainbow-mode
 :hook prog-mode)
#+END_SRC

*** Idle highlight mode

Basically its the same as highlight-thing but seems to be smarter and less
distracting.

#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
 :custom
 (idle-highlight-idle-time 0.2)
 :hook
 (prog-mode . idle-highlight-mode)
 :config
 ;; (set-face-background 'idle-highlight "#c51060")
 (set-face-foreground 'idle-highlight "#999")
 (set-face-background 'idle-highlight "#222"))
#+END_SRC

*** Hl-todo

Highlight TODO and similar keywords in comments and strings.
See the [[https://github.com/tarsius/hl-todo][package repository]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
 :config
 (global-hl-todo-mode))
#+END_SRC

*** Highlight indentation

*** Highlight chars

*** Highlight leading spaces

*** VI Tilde fringe

*** Info colors

#+BEGIN_SRC emacs-lisp
(use-package info-colors
 :hook
 (Info-selection #'info-colors-fontify-node))
#+END_SRC

*** Fill column

*** All the icons

*** Emojify

*** Mode line
**** Mood-line (active)

A minimal mode-line configuration that aims to replicate some of the features of
the =doom-modeline= package.

#+BEGIN_SRC emacs-lisp
(use-package mood-line
 :hook
 (after-init . mood-line-mode))
#+END_SRC

**** Moody + minions

**** Spaceline

**** Flycheck color

*** Beacon

*** Git gutter

Mark uncommitted changes in the fringe.

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
 :ensure t
 :config
 (global-git-gutter-mode t)
 :diminish git-gutter-mode)
#+END_SRC

*** Tracking
#+BEGIN_SRC emacs-lisp
(use-package tracking
 :ensure t)
#+END_SRC

** Evil
*** Main

*** Evil collection

*** Alignment

*** Sentence navigation

*** Multiple cursors

*** Matchit

*** Surround

*** Args

*** Embrace

*** Visualstar

*** Vimish fold

*** Indent plus

*** Commentary

*** Exchange

*** Numbers

** Diff

** Eldoc

** Secrets

** Bookmarks

** Completion
*** Company

*** Company quickhelp

*** Company FLX

** Spellcheck

** Flycheck

** Flyspell

** Compilation

** Dictionary
*** Powerthesaurus

*** Define word

** Dired
*** Constants (file extensions)

*** Dired

*** Dired hide dotfiles

*** Dired fl

*** Dired rsync

*** Dired launch

*** Dired+

*** Dired hacks.

**** Prerequisites

**** Filter

**** Avfs

**** Open

**** Narrow

*** Peep dired

** Neotree

*** Icons

** Navigation
*** Ace window

*** Winner

*** Expand region

*** Ivy

**** Rich

**** Xref

**** Flyspell correct

**** Hydra

*** IBuffer VC

*** FZF

*** Counsel

*** Ace link

*** Counsel etags

*** Swiper

*** Dumb jump

*** Avy

*** Avy zap

*** Avy flycheck

*** Tmux integration

** Projectile
*** Setup

*** Counsel

** Git
*** With editor

*** Magit

*** Evil-Magit

*** Magit todos

*** Forge

*** Git gutter

*** Time machine

*** Syntactic modes

*** Magithub

*** Gist

** Shell
*** Eshell

*** EM-smart

*** Esh help

*** Esh autosuggest

*** EShell toggle

*** VTerm

Install [[libvterm][https://github.com/akermu/emacs-libvterm]].

#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC

** Undo
*** Propose

*** Tree

** SSH
*** Config mode

*** Tramp

*** Counsel-tramp

*** Docker-tramp

*** Vagrant-tramp

*** Kubernetes-tramp

*** Blah

** Smartparens
*** Main

*** Evil

** Snippets
*** Yasnippet

** Org
*** Main

*** Evil

*** Bullets

** LSP
*** Mode

*** LSP UI

*** Company LSP

*** Treemacs

** Languages
*** Lisp

*** Emacs Lisp
**** Mode

**** Refs

**** Macrostep

**** Highlight

*** Haskell
**** Hasklig (ligatures)

**** Mode

**** Hi2

**** Hindent

**** Ormolu

**** Company-cabal

**** Hasky-stack

**** Hasky-extensions

**** LSP

*** PureScript
**** Mode

**** PSC IDE

**** PSCI

*** Idris

*** ATS/ATS2

*** Nix

**** Helpers

*** Ocaml

**** Variables

**** Utop

**** Merlin

**** Tuareg

**** Indentation

**** Dune

**** Flycheck

*** Coq

*** Merlin eldoc

*** Reason

*** SML

*** Scheme

*** Racket

*** Clojure

*** Scala

*** Kotlin

*** Rust

*** Erlang
*** Elixir

*** Prolog

*** Dhall

*** Terraform
**** Mode

**** Company

*** SQL

*** Json

*** Yaml

*** Markdown

*** Emmet

*** Tex

*** Prolog

*** Python

*** Ruby

*** PHP

*** Java

*** Kotlin

*** Groovy

*** Web
**** Mode

**** Company

*** Styling
**** CSS mode

**** LSP-CSS

**** SCSS mode

*** Go

*** TypeScript

*** Flow

*** JavaScript
**** tern

**** npm

**** js2

**** eslintd-fix

**** xref-js2

**** js2-refactor

**** rjxs-mode

**** TODO LSP

**** prettier

**** GraphQL

**** company-tern

*** Vue

*** Elm

*** Nginx

*** D

*** C/C++

*** Objective C

*** Matlab

*** Octave

*** Latex

*** Toml

*** Bison

*** Pug

*** Jade

*** Lua

*** Haml

*** Slim

*** Robots.txt

*** Dotenv

*** CSV

*** Api blueprint

*** NASM

*** IASM

*** BNF

*** Ansible

*** Arduino

*** GLSL

** GDB

** DAP

** HTTP

** Docker

** Kubernetes

** Hydra
*** Install

*** Text scale

*** Window management

** Help

** Infrastructure
*** Net utils

*** IX

** Calendar

** Email

** Reading
*** PDF

*** Djvu

** Translation

** Search
*** Engine mode

*** Google this

*** Stack exchange

** Messaging
*** Prerequisites

*** Slack

*** Telega

=telega.el= is full featured unofficial client for Telegram platform for GNU Emacs.

#+BEGIN_SRC emacs-lisp
(use-package telega
 :requires
 (tracking)
 :config
 (telega-notifications-mode 1)
 (telega-mode-line-mode 1)
 :custom
 (telega-use-tracking t)
 :custom-face
 (telega-entity-type-code ((t :family "Iosevka")))
 (telega-entity-type-pre ((t :family "Iosevka")))
 (telega-webpage-fixed ((t :family "Iosevka" :height 0.85))))
#+END_SRC

** Pomodoro

** Statistics
*** Uptimes

*** Keyfreq

*** Wakatime

** Delight

** Diminish
