#+TITLE: Emacs configuration file
#+AUTHOR: Artjom Vejsel
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Credits

Inspired by [[https://github.com/vyorkin/emacs.d][vyorkin's]] setup.

* Setup

- Symlink =init.org= to =~/.emacs.d/init.org=
- Symlink =init.el= to =~/.emacs.d/init.el=

#+BEGIN_SRC sh :tangle no
ln -sf $(pwd)/init.org ~/.emacs.d/init.org
ln -sf $(pwd)/init.el ~/.emacs.d/init.el
#+END_SRC

On the first run Emacs will install some packages. It's best to restart Emacs after that process is done for the first time.

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC

When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

* Config

[[https://www.emacswiki.org/emacs/LexicalBinding][Lexical binding]] for the init-file is needed, it can be specified in the header.
This is the first line of the actual configuration.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

Tangle and compile this file on save automatically:

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (file-truename (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
;;    (byte-compile-file (concat user-emacs-directory "init.el"))
     )))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

** Use package

Initialize package and add package archives.

#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC

Set ~package-enable-at-startup~ to ~nil~ for slightly faster startup.
See [[https://www.reddit.com/r/emacs/comments/1rdstn/set_packageenableatstartup_to_nil_for_slightly/][this post on Reddit]].

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
#+END_SRC

Use MELPA as shown [[https://melpa.org/#/getting-started][here]].

#+BEGIN_SRC emacs-lisp
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to disable/enable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;; (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
#+END_SRC

It is ok to use both ~package-initialize~ and ~use-package~ for a well behaved
package: ~package-initialize~ will not load the whole package, but only autoload
functions selected by the package author.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Install [[https://github.com/jwiegley/use-package][use-package]].

Install missing packages automatically if not already present on the system and
be less verbose.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))

(setq
 use-package-always-ensure t
 use-package-verbose nil)
#+END_SRC

** Warnings

Decrease the =obsolete= warnings annoyance level.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not obsolete))
#+END_SRC

This helps to get rid of =functions might not be defined at runtime= warnings.
See [[https://github.com/jwiegley/use-package/issues/590][this issue]] for details.

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC

** Defaults
*** Backups & lock files

Don't create lock files.

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

I don't care about auto save and backup files.
Also I don't like distracting alarms.

#+BEGIN_SRC emacs-lisp
(setq
 make-backup-files nil        ; disable backup files
 auto-save-list-file-name nil ; disable .saves files
 auto-save-default nil        ; disable auto saving
 ring-bell-function 'ignore)  ; turn off alarms completely
#+END_SRC

*** Misc

Use =y/n= instead of =yes/no=.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Don't prompt for non existent name when creating new buffers.

#+BEGIN_SRC emacs-lisp
(setq-default confirm-nonexistent-file-or-buffer t)
#+END_SRC

Enable =recentf-mode= and remember a lot of files.

#+BEGIN_SRC emacs-lisp
(setq
 recentf-auto-cleanup 'never
 recentf-max-menu-items 0
 recentf-max-saved-items 300
 recentf-filename-handlers '(file-truename abbreviate-file-name))

(recentf-mode 1)
#+END_SRC

Automatically save place in each file.

#+BEGIN_SRC emacs-lisp
(setq
 save-place-forget-unreadable-files t
 save-place-limit 200)

(save-place-mode 1)
#+END_SRC

** Location

Set the location name and coordinates.

#+BEGIN_SRC emacs-lisp
(setq
 calendar-location-name "Moscow, RU"
 calendar-latitude 55.76
 calendar-longitude 37.78)
#+END_SRC

** Core
*** Utils

Utility functions.

#+BEGIN_SRC emacs-lisp
(defun my/emacs-path (path)
  "Expands `path` with Emacs home directory."
  (expand-file-name path user-emacs-directory))

(defun my/tmp-path (path)
  "Expand `path` with Emacs temporary directory."
  (my/emacs-path (format "tmp/%s" path)))

(defun my/lisp-path (path)
  "Expand `path` with Emacs `/lisp` directory."
  (my/emacs-path (format "lisp/%s" path)))
#+END_SRC

*** Builtin
**** Files

On save/write file:
- Automatically delete trailing whitespace.
- Silently put a newline at the end of file if there isn't already one there.

#+BEGIN_SRC emacs-lisp
(use-package files
 :ensure nil
 :commands
 (generate-new-buffer
  executable-find
  file-name-base
  file-name-extension)
 :custom
 (require-final-newline t)
 :hook
 (before-save . delete-trailing-whitespace))
#+END_SRC

**** Reverting

Enable and diminish [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Autorevert.html#Autorevert][autorevert]] mode.

#+BEGIN_SRC emacs-lisp
(use-package autorevert
 :ensure nil
 :custom
 ;; Don't generate any messages whenever a buffer is reverted
 ;;(auto-revert-verbose nil)
 ;; Operate on non-file-visiting buffers
 (global-auto-revert-non-file-buffers t)
 :config
 ;; Operate on file-visiting buffers
 (global-auto-revert-mode)
 :diminish auto-revert-mode)
#+END_SRC

**** Reverse-im

[[https://github.com/a13/reverse-im.el][Reverse-im]] translates local bindings (like russian-computer used here) to
Emacs bindings.

#+BEGIN_SRC emacs-lisp
(use-package char-fold
  :custom
  (char-fold-symmetric t)
  (search-default-mode #'char-fold-to-regexp))
(use-package reverse-im
  :ensure t
  :demand t
  :after char-fold
  :bind
  ("M-T" . reverse-im-translate-word)
  :custom
  (reverse-im-char-fold t)
  (reverse-im-read-char-advice-function #'reverse-im-read-char-exclude)
  (reverse-im-input-methods '("russian-computer"))
  :config
  (reverse-im-mode t))
#+END_SRC

**** Uniquify

Using =reverse= naming method, buffers visiting the files =/u/rms/tmp/Makefile= and =/usr/projects/zaphod/Makefile= would be named =‘Makefile\tmp’= and =‘Makefile\zaphod’=. It puts the directory names in reverse order, so that =/top/middle/file= becomes =‘file\middle\top’=.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
 :ensure nil
 :custom
 ;; use "qux\bar\foo"
 (uniquify-buffer-name-style 'reverse))
#+END_SRC

**** Frame

- Disable blinking cursor.
- Disable suspending on =C-z=.
- Stretch cursor on wide characters.

#+BEGIN_SRC emacs-lisp
(use-package frame
 :ensure nil
 :config
 (blink-cursor-mode 0)
 (setq x-stretch-cursor t)
 :bind
 ("C-z" . nil))
#+END_SRC

**** Delsel

**** Simple

**** Pixel scroll

**** Prog mode

Prettify symbols.

#+begin_src emacs-lisp :tangle no
(use-package prog-mode
 :ensure nil
 :commands
 (global-prettify-symbols-mode)
 :init
 (setq prettify-symbols-unprettify-at-point 'right-edge)
 :config
 ;; convert certain words into symbols, e.g. lambda becomes λ.
 (global-prettify-symbols-mode t))
#+end_src

**** IBuffer

**** Mule

**** ETags

**** Man

Format man pages [[https://unix.stackexchange.com/a/274795][properly]].

#+BEGIN_SRC emacs-lisp
(use-package man
 :ensure nil
 :custom-face
 (Man-overstrike ((t (:inherit font-lock-type-face :weight bold))))
 (Man-underline ((t (:inherit font-lock-keyword-face :slant italic)))))
#+END_SRC

**** Calendar

#+BEGIN_SRC emacs-lisp
(use-package calendar
 :ensure nil
 :custom
 (calendar-week-start-day 1))
#+END_SRC

**** Ido

Use [[https://www.masteringemacs.org/article/introduction-to-ido-mode][Ido mode]].

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ido
 :ensure nil
 :config
 (ido-mode 1)
 ;; let's try with vertical aligned variants
 (setf (nth 2 ido-decorations) "\n")
 :custom
 ;; show any name that has the chars you typed
 (ido-enable-flex-matching t)
 ;; enable ido for all buffers
 (ido-everywhere t))
#+END_SRC

**** Term

Disable mandatory parameter to =term= function.

#+BEGIN_SRC emacs-lisp
(use-package term
 :ensure nil
 :custom-face
;; dark theme
;; (term ((t :inherit default :background "black" :foreground "white")))
;; (term-color-black ((t :foreground "gray" :background "gray")))
;; (term-color-red ((t :foreground "red" :background "red")))
;; (term-color-green ((t :foreground "green" :background "green")))
;; (term-color-yellow ((t :foreground "yellow" :background "yellow")))
;; (term-color-blue ((t :foreground "blue" :background "blue")))
;; (term-color-magenta ((t :foreground "magenta" :background "magenta")))
;; (term-color-cyan ((t :foreground "cyan" :background "cyan")))
;; (term-color-white ((t :foreground "white" :background "white")))
;; gray80 theme
 (term ((t :inherit default :background "gray80" :foreground "black")))
 (term-color-black ((t :foreground "gray80" :background "gray15")))
 (term-color-red ((t :foreground "red3" :background "red3")))
 (term-color-green ((t :foreground "green4" :background "green4")))
 (term-color-yellow ((t :foreground "yellow4" :background "yellow4")))
 (term-color-blue ((t :foreground "blue3" :background "blue3")))
 (term-color-magenta ((t :foreground "magenta4" :background "magenta4")))
 (term-color-cyan ((t :foreground "cyan4" :background "cyan4")))
 (term-color-white ((t :foreground "white" :background "white")))
 :config
 (fset 'origterm
  (symbol-function 'term))
 (defun term (&optional term)
  (interactive)
  (origterm
   (or term
       explicit-shell-file-name
       shell-file-name))))
#+END_SRC

**** Face remap

Diminish remap mode.

#+BEGIN_SRC emacs-lisp
(use-package face-remap
 :commands
 (buffer-face-mode-face
  face-remap-add-relative
  buffer-face-mode)
 :ensure nil
 :diminish buffer-face-mode)
#+END_SRC

**** CC mode

** UI
*** Basics.

#+BEGIN_SRC emacs-lisp
(setq
 inhibit-startup-screen t ; Don't show splash screen
 use-dialog-box nil       ; Disable dialog boxes
 use-file-dialog nil)     ; Disable file dialog
#+END_SRC

*** Scroll

*** UI elements

Set cursor color.
Use default-frame-alist instead of set-cursor-color to ensure that newly
created frames will have right settings.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(cursor-color . "red3"))
#+END_SRC

Hide toolbar and scrollbars.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))
#+END_SRC

I generally prefer to hide the menu bar, but doing this on OS X simply makes it
update unreliably in GUI frames, so we make an exception.

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (set-frame-parameter frame 'menu-bar-lines
                                     (if (display-graphic-p frame) 1 0))))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1)))
#+END_SRC

*** Cursor

Show full path in the title bar.

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+END_SRC

*** Fringe

*** Window-divider

*** Line-spacing

*** Startup

Start maximized.

#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC

*** Mode-line

*** Time

#+BEGIN_SRC emacs-lisp
(use-package time
 :ensure nil
 :custom
 (display-time-default-load-average nil)
 (display-time-24hr-format t)
 :config
 (display-time-mode t))
#+END_SRC

** Editor
*** Customizations

I don't use the customizations UI. Lets keep those automated
customizations in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][separate file]]. The ~'noerror~ argument passed to
load prevents errors if the file doesn’t exist.

#+BEGIN_SRC emacs-lisp
(setq custom-file (my/emacs-path "custom.el"))
(load custom-file 'noerror)
#+END_SRC

*** Basics

Some basic things.

#+BEGIN_SRC emacs-lisp
(setq
 sentence-end-double-space nil  ; sentences should end in one space
 initial-scratch-message nil    ; empty scratch buffer
 enable-recursive-minibuffers t ; allow minibuffer commands in the minibuffer
 echo-keystrokes 0.1            ; show keystrokes right away, don't show the message in the scratch buffer
 ns-use-native-fullscreen nil   ; disable native fullscreen support
)
#+END_SRC

*** Tabs & spaces

- Allow to use tabs for indent
- One tab is 4 spaces.

#+BEGIN_SRC emacs-lisp
(setq-default
 indent-tabs-mode t
 tab-width 4)
#+END_SRC

Display line and column numbers in the mode-line.

#+BEGIN_SRC emacs-lisp
(setq
  line-number-mode t
  column-number-mode t)
#+END_SRC

*** Line wrapping

Long lines will show a continuation character in the right margin at the
window’s edge to indicate that next line is the continuation of current.

#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines nil)
#+END_SRC

Break line at =N= characters.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

Enable automatic line breaking for all text mode buffers.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Always wrap lines.

#+BEGIN_SRC emacs-lisp :tangle no
;; (global-visual-line-mode)
#+END_SRC

Disable special glyph for non-ASCII spaces.

#+BEGIN_SRC emacs-lisp
(setq nobreak-char-display nil)
#+END_SRC

** Benchmarking

** Quelpa

Setup [[https://framagit.org/steckerhalter/quelpa][quelpa]].

#+BEGIN_SRC emacs-lisp
(if (require 'quelpa nil t)
  ;; Prevent quelpa from doing anyting that requires network connection.
  (setq
   quelpa-update-melpa-p nil    ; Don't update MELPA git repo
   quelpa-checkout-melpa-p nil  ; Don't clone MELPA git repo
   quelpa-upgrade-p nil         ; Don't try to update packages automatically
   quelpa-self-upgrade-p nil)   ; Don't upgrade quelpa automatically

  ;; Comment/uncomment line below to disable/enable quelpa auto-upgrade.
  ;; (quelpa-self-upgrade)

  (with-temp-buffer
    (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
    (eval-buffer)))
#+END_SRC

Install =use-package= and the =quelpa= handler.

#+BEGIN_SRC emacs-lisp
(quelpa
 '(quelpa-use-package
   :fetcher github
   :repo "quelpa/quelpa-use-package"))
(require 'quelpa-use-package)
#+END_SRC

Advice setting ~:ensure nil~ for =use-package= + =quelpa=.

#+BEGIN_SRC emacs-lisp
(quelpa-use-package-activate-advice)
#+END_SRC

** Use-package plugins

** Font
*** Faces

#+BEGIN_SRC emacs-lisp
(use-package faces
  :ensure nil
  :custom
  (face-font-family-alternatives
   '(("Ricty Diminished L")))
  :init
  (set-face-attribute
   'default nil
   :family (caar face-font-family-alternatives)
   :weight 'regular
   :height 100
   :width 'semi-condensed)
  (set-fontset-font
   "fontset-default"
   'cyrillic
   (font-spec :registry "iso10646-1" :script 'cyrillic))
  (set-face-attribute
   'fixed-pitch-serif
   nil
   :family "Iosevka"))
#+END_SRC

** Theme

Use [[https://github.com/arcticicestudio/nord-emacs][Nord Emacs theme]].

#+BEGIN_SRC emacs-lisp :tangle no
(use-package nord-theme
  :ensure t
  :config
  (load-theme 'nord t))
#+END_SRC

Use [[https://draculatheme.com/emacs/][Dracula Emacs theme]].
Note that despite set-cursor-color function belongs to the frame package, it
used here since load-theme call overwrite cursor color value.
- Set cursor color to red.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package dracula-theme
  :ensure t
  :config
  (load-theme 'dracula t))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(deftheme lg-xemacs-like "xemacs-like theme")

(custom-theme-set-faces 'lg-xemacs-like

 '(default ((t (:background "gray80" :foreground "black"))))
 '(cursor ((t (:foregound "Red3"))))
 '(border ((t (:foregound "black"))))

 '(blue ((t (:foreground "blue"))))
 '(bold ((t (:bold t))))
 '(bold-italic ((t (:italic t :bold t))))
 '(border-glyph ((t (nil))))
 '(custom-button-face ((t (:bold t))))
 '(custom-changed-face ((t (:background "blue" :foreground "white"))))
 '(custom-documentation-face ((t (nil))))
 '(custom-face-tag-face ((t (:underline t))))
 '(custom-group-tag-face ((t (:underline t :foreground "blue"))))
 '(custom-group-tag-face-1 ((t (:underline t :foreground "red"))))
 '(custom-invalid-face ((t (:background "red" :foreground "yellow"))))
 '(custom-modified-face ((t (:background "blue" :foreground "white"))))
 '(custom-rogue-face ((t (:background "black" :foreground "pink"))))
 '(custom-saved-face ((t (:underline t))))
 '(custom-set-face ((t (:background "white" :foreground "blue"))))
 '(custom-state-face ((t (:foreground "dark green"))))
 '(custom-variable-button-face ((t (:underline t :bold t))))
 '(custom-variable-tag-face ((t (:underline t :foreground "blue"))))
 '(dired-face-boring ((t (:foreground "Gray65"))))
 '(dired-face-directory ((t (:bold t))))
 '(dired-face-executable ((t (:foreground "SeaGreen"))))
 '(dired-face-flagged ((t (:background "LightSlateGray"))))
 '(dired-face-marked ((t (:background "PaleVioletRed"))))
 '(dired-face-permissions ((t (:background "grey75" :foreground "black"))))
 '(dired-face-setuid ((t (:foreground "Red"))))
 '(dired-face-socket ((t (:foreground "magenta"))))
 '(dired-face-symlink ((t (:foreground "cyan"))))
 '(font-lock-builtin-face ((t (:foreground "red3"))))
 '(font-lock-comment-face ((t (:foreground "blue4"))))
 '(font-lock-constant-face ((t (:foreground "red3"))))
 '(font-lock-doc-string-face ((t (:foreground "green4"))))
 '(font-lock-function-name-face ((t (:foreground "brown4"))))
 '(font-lock-keyword-face ((t (:foreground "red4"))))
 '(font-lock-preprocessor-face ((t (:foreground "blue3"))))
 '(font-lock-reference-face ((t (:foreground "red3"))))
 '(font-lock-string-face ((t (:foreground "green4"))))
 '(font-lock-type-face ((t (:foreground "steelblue"))))
 '(font-lock-variable-name-face ((t (:foreground "magenta4"))))
 '(font-lock-warning-face ((t (:bold t :foreground "Red"))))
 '(green ((t (:foreground "green"))))
 '(gui-button-face ((t (:background "grey75" :foreground "black"))))
 '(gui-element ((t (:background "Gray80"))))
 '(highlight ((t (:background "darkseagreen2"))))
 '(info-node ((t (:italic t :bold t))))
 '(info-xref ((t (:bold t))))
 '(isearch ((t (:background "paleturquoise"))))
 '(italic ((t (:italic t))))
 '(left-margin ((t (nil))))
 '(list-mode-item-selected ((t (:background "gray68"))))
 '(modeline ((t (:background "Gray80"))))
 '(modeline-buffer-id ((t (:background "Gray80" :foreground "blue4"))))
 '(modeline-mousable ((t (:background "Gray80" :foreground "firebrick"))))
 '(modeline-mousable-minor-mode ((t (:background "Gray80" :foreground "green4"))))
 '(paren-blink-off ((t (:foreground "gray80"))))
 '(paren-match ((t (:background "darkseagreen2"))))
 '(paren-mismatch ((t (:background "DeepPink" :foreground "black"))))
 '(pointer ((t (nil))))
 '(primary-selection ((t (:background "gray65"))))
 '(red ((t (:foreground "red"))))
 '(region ((t (:background "gray65"))))
 '(right-margin ((t (nil))))
 '(secondary-selection ((t (:background "paleturquoise"))))
 '(text-cursor ((t (:background "Red3" :foreground "gray80"))))
 '(toolbar ((t (:background "Gray80"))))
 '(underline ((t (:underline t))))
 '(vertical-divider ((t (:background "Gray80"))))
 '(widget-button-face ((t (:bold t))))
 '(widget-button-pressed-face ((t (:foreground "red"))))
 '(widget-documentation-face ((t (:foreground "dark green"))))
 '(widget-field-face ((t (:background "gray85"))))
 '(widget-inactive-face ((t (:foreground "dim gray"))))
 '(yellow ((t (:foreground "yellow"))))
 '(zmacs-region ((t (:background "gray65"))))
 '(escape-glyph ((t (:weight bold :background "gold" :foreground "blue"
                             :box (:line-width -1 :color "black")))))
 )

(enable-theme 'lg-xemacs-like)
#+END_SRC

** Key bindings

*** General package

There should be keybinding congiguration
#+begin_src emacs-lisp
(use-package general)
#+end_src

** Behavior
*** Trashing

*** Automatic updates

Automatically update Emacs packages. Useful if you're working in multiple
machines and tend to forget to manually update packages from time to time.

The main idea is that you set a desired periodicity for the updates, and when
you start Emacs, the packages will be automatically updated if enough days have
passed since the last update.

See the [[https://github.com/rranelli/auto-package-update.el][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
 :config
 (setq
  auto-package-update-delete-old-versions t ; Delete residual old version directory when updating
  auto-package-update-interval 1)           ; Update packages every day
; (auto-package-update-maybe)                ; Check for updates on startup
 (auto-package-update-at-time "06:00"))     ; Update at =6:00=
#+END_SRC

*** Clipboard

*** Copy as

*** Posframe

Pop a [[https://github.com/tumashu/posframe][posframe]] (a child-frame) at point.

#+begin_src emacs-lisp
(use-package posframe
  :custom
  (posframe-mouse-banish nil))
#+end_src

*** Extra whitespace trimming

Unobtrusively trim extraneous whitespace only in lines edited.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
 :config
 (ws-butler-global-mode)
 :diminish ws-butler-mode)
#+END_SRC

*** Aggressive indent

*** Auto-save buffers

Save buffers when they lose focus.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package super-save
 :config
 (super-save-mode +1)
 :diminish)
#+END_SRC

*** Auto read-only

*** Zoom

*** Transparency

*** Go to last change

*** Fullframe

*** Folding

*** Which key

#+BEGIN_SRC emacs-lisp
(use-package which-key
 :diminish which-key-mode
 :init
 (setq
  which-key-idle-delay 0.5
  which-key-sort-order 'which-key-prefix-then-key-order-reverse)
 :config
 (which-key-mode))
#+END_SRC

*** Free keys

Show free bindings in current buffer. To use, call the command =M-x free-keys=.
See the [[https://github.com/Fuco1/free-keys][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package free-keys)
#+END_SRC

*** Sudo edit

Utilities for opening files with sudo. Just type =M-x sudo= on an already opened
read-only file.

#+BEGIN_SRC emacs-lisp
(use-package sudo-edit)
#+END_SRC

*** Try

Allows you to try out Emacs packages without installing them. Just type =M-x try=.

#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

*** Restart

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
 :after general
 :demand t)
#+END_SRC

*** backward-forward

#+BEGIN_SRC emacs-lisp
(use-package backward-forward
 :after general
 :demand t
 :config
 (backward-forward-mode t)
 :bind
 (:map backward-forward-mode-map
  ("<C-left>" . nil)
  ("<C-right>" . nil)
  ("<M-left>" . backward-forward-previous-location)
  ("<M-right>" . backward-forward-next-location)))
#+END_SRC

** Appearance
*** Customization

*** Page break lines

Display ugly =^L= page breaks as tidy horizontal lines.

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
 :init
 (global-page-break-lines-mode 1)
 :diminish page-break-lines-mode)
#+END_SRC

*** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
 :commands
 (rainbow-delimiters-unmatched-face)
 :config
 ;; Pastels..
 (set-face-attribute 'rainbow-delimiters-depth-1-face nil :foreground "#78c5d6")
 (set-face-attribute 'rainbow-delimiters-depth-2-face nil :foreground "#bf62a6")
 (set-face-attribute 'rainbow-delimiters-depth-3-face nil :foreground "#459ba8")
 (set-face-attribute 'rainbow-delimiters-depth-4-face nil :foreground "#e868a2")
 (set-face-attribute 'rainbow-delimiters-depth-5-face nil :foreground "#79c267")
 (set-face-attribute 'rainbow-delimiters-depth-6-face nil :foreground "#f28c33")
 (set-face-attribute 'rainbow-delimiters-depth-7-face nil :foreground "#c5d647")
 (set-face-attribute 'rainbow-delimiters-depth-8-face nil :foreground "#f5d63d")
 (set-face-attribute 'rainbow-delimiters-depth-9-face nil :foreground "#78c5d6")
 ;; Make unmatched parens stand out more
 (set-face-attribute
  'rainbow-delimiters-unmatched-face nil
   :foreground 'unspecified
   :inherit 'show-paren-mismatch
   :strike-through t)
 (set-face-foreground 'rainbow-delimiters-unmatched-face "magenta")
 :hook
 (prog-mode . rainbow-delimiters-mode)
 :diminish rainbow-delimiters-mode)
#+END_SRC

*** Rainbow identifiers

#+BEGIN_SRC emacs-lisp
(use-package rainbow-identifiers
 :hook
 (prog-mode . rainbow-identifiers-mode)
 :diminish rainbow-identifiers-mode)
#+END_SRC

*** Rainbow mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
 :diminish rainbow-mode
 :hook prog-mode)
#+END_SRC

*** Idle highlight mode

Basically its the same as highlight-thing but seems to be smarter and less
distracting.

#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
 :custom
 (idle-highlight-idle-time 0.2)
 :hook
 (prog-mode . idle-highlight-mode)
 :config
 ;; (set-face-background 'idle-highlight "#c51060")
 (set-face-foreground 'idle-highlight "#999")
 (set-face-background 'idle-highlight "#222"))
#+END_SRC

*** Hl-todo

Highlight TODO and similar keywords in comments and strings.
See the [[https://github.com/tarsius/hl-todo][package repository]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
 :config
 (global-hl-todo-mode))
#+END_SRC

*** Highlight indentation

*** Highlight chars

*** Highlight leading spaces

*** VI Tilde fringe

*** Info colors

#+BEGIN_SRC emacs-lisp
(use-package info-colors
 :hook
 (Info-selection #'info-colors-fontify-node))
#+END_SRC

*** Fill column

*** All the icons

*** Emojify

*** Mode line

**** Good-line (active)

Mood-line [[https://github.com/TatriX/good-line][fork]].

#+BEGIN_SRC emacs-lisp
(use-package good-line
 :ensure nil
 :hook
 (after-init . good-line-mode)
 :quelpa (good-line :fetcher github :repo "TatriX/good-line"))
#+END_SRC

**** Mood-line

A minimal mode-line configuration that aims to replicate some of the features of
the =doom-modeline= package.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package mood-line
 :hook
 (after-init . mood-line-mode))
#+END_SRC

**** Moody + minions

**** Spaceline

**** Flycheck color

*** Beacon

*** Git gutter

Mark uncommitted changes in the fringe.

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
 :ensure t
 :config
 (global-git-gutter-mode t)
 :diminish git-gutter-mode)
#+END_SRC

*** Tracking
#+BEGIN_SRC emacs-lisp
(use-package tracking
 :ensure t)
#+END_SRC

** Evil
*** Main

*** Evil collection

*** Alignment

*** Sentence navigation

*** Multiple cursors

*** Matchit

*** Surround

*** Args

*** Embrace

*** Visualstar

*** Vimish fold

*** Indent plus

*** Commentary

*** Exchange

*** Numbers

** Diff

** Eldoc

** Secrets

** Bookmarks

** Completion
*** Company

#+BEGIN_SRC emacs-lisp
(use-package company
 :hook
 ;; Use company-mode in all buffers
 (after-init . global-company-mode)
 :custom
 (company-dabbrev-ignore-case nil)
 (company-dabbrev-code-ignore-case nil)
 (company-dabbrev-downcase nil)
 (company-idle-delay 0.0 "adjust this setting according to your typing speed")
 (company-minimum-prefix-length 1)
 ;; Disable in org
 ;;(company-global-modes '(not org-mode))

 :bind (;; Replace `completion-at-point' and `complete-symbol' with
         ;; `company-manual-begin'. You might think this could be put
         ;; in the `:bind*' declaration below, but it seems that
         ;; `bind-key*' does not work with remappings.
         ([remap completion-at-point] . company-manual-begin)
         ([remap complete-symbol] . company-manual-begin)

         ;; The following are keybindings that take effect whenever
         ;; the completions menu is visible, even if the user has not
         ;; explicitly interacted with Company.

         :map company-active-map

         ;; Make TAB always complete the current selection. Note that
         ;; <tab> is for windowed Emacs and TAB is for terminal Emacs.
         ("<tab>" . company-complete-selection)
         ("TAB" . company-complete-selection)

         ;; Prevent SPC from ever triggering a completion.
         ("SPC" . nil)

         ;; The following are keybindings that only take effect if the
         ;; user has explicitly interacted with Company.

         :map company-active-map
         :filter (company-explicit-action-p)

         ;; Make RET trigger a completion if and only if the user has
         ;; explicitly interacted with Company. Note that <return> is
         ;; for windowed Emacs and RET is for terminal Emacs.
         ("<return>" . company-complete-selection)
         ("RET" . company-complete-selection)

         ;; We then do the same for the up and down arrows. Note that
         ;; we use `company-select-previous' instead of
         ;; `company-select-previous-or-abort'. I think the former
         ;; makes more sense since the general idea of this `company'
         ;; configuration is to decide whether or not to steal
         ;; keypresses based on whether the user has explicitly
         ;; interacted with `company', not based on the number of
         ;; candidates.

         ("<up>" . company-select-previous)
         ("<down>" . company-select-next))

  :bind* (;; The default keybinding for `completion-at-point' and
          ;; `complete-symbol' is M-TAB or equivalently C-M-i. Here we
          ;; make sure that no minor modes override this keybinding.
          ("M-TAB" . company-manual-begin))

 :config
 ;; Style nicely
 (let* ((bg (face-attribute 'default :background))
       (bg-light (color-lighten-name bg 2))
       (bg-lighter (color-lighten-name bg 5))
       (bg-lightest (color-lighten-name bg 10))
       (ac (face-attribute 'match :foreground)))
  (custom-set-faces
   `(company-tooltip
     ((t (:inherit default :background ,bg-light))))
   `(company-scrollbar-bg ((t (:background ,bg-lightest))))
   `(company-scrollbar-fg ((t (:background ,bg-lighter))))
   `(company-tooltip-selection
     ((t (:inherit font-lock-function-name-face))))
   `(company-tooltip-common
     ((t (:inherit font-lock-constant-face))))
   `(company-preview-common
     ((t (:foreground ,ac :background ,bg-lightest))))))
 :diminish company-mode)
#+END_SRC

*** Company quickhelp

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
 :after company
 :custom
 (company-quickhelp-delay 3))
#+END_SRC

*** Company FLX

FLX fuzzy matching for =company=.
This only works with the =company-capf= backend.

#+BEGIN_SRC emacs-lisp
(use-package flx)

(use-package company-flx
 :after (company flx)
 :commands
 (company-flx-mode)
 :demand t
 :config
 ;; use C-o to switch backend and
 ;; enable company mode fuzziness
 (company-flx-mode +1))
#+END_SRC

** Spellcheck

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :after (general)
  :demand t
  :commands
  (global-flycheck-mode)
  :init
  (setq-default
   flycheck-disabled-checkers
   '(emacs-lisp-checkdoc
     javascript-jshint
     haskell-stack-ghc
     haskell-ghc
     haskell-hlint))
  (setq
   flycheck-highlighting-mode 'lines
   flycheck-indication-mode 'left-fringe
   flycheck-mode-line-prefix "fly"
   flycheck-javascript-eslint-executable "eslint_d")
  :config
  (global-flycheck-mode 1)
  ;; Make the error list display like similar lists in contemporary IDEs
  ;; like VisualStudio, Eclipse, etc.
  (add-to-list
   'display-buffer-alist
   `(,(rx bos "*errors*" eos)
     ;; (display-buffer-reuse-window
     ;;  display-buffer-in-side-window)
     (side . bottom)
     (reusable-frames . visible)
     (window-height . 0.33)))
  :diminish flycheck-mode)
#+END_SRC

** Flyspell

** Compilation

** Dictionary
*** Powerthesaurus

*** Define word

** Dired
*** Constants (file extensions)

*** Dired

*** Dired hide dotfiles

*** Dired fl

*** Dired rsync

*** Dired launch

*** Dired+

*** Dired hacks.

**** Prerequisites

**** Filter

**** Avfs

**** Open

**** Narrow

*** Peep dired

** Neotree

** Treemacs

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] - a tree layout file explorer for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC

Allows to quickly add your projectile projects to the treemacs workspace.

#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC

Allows you to use treemacs icons in dired buffers with treemacs-icons-dired-mode.

#+BEGIN_SRC emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+END_SRC

A small utility package to fill the small gaps left by using filewatch-mode and git-mode in conjunction with magit: it will inform treemacs about (un)staging of files and commits happening in magit.

#+BEGIN_SRC emacs-lisp
(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC

*** Icons

** Navigation
*** Ace window

*** Winner

*** Expand region

*** Ivy

**** Rich

**** Xref

**** Flyspell correct

**** Hydra

*** IBuffer VC

*** FZF

*** Counsel

*** Ace link

*** Counsel etags

*** Swiper

*** Dumb jump

*** Avy

*** Avy zap

*** Avy flycheck

*** Tmux integration

** Projectile

Project Interaction Library for Emacs.
https://github.com/bbatsov/projectile/blob/master/doc/usage.md
https://projectile.readthedocs.io/en/latest/usage/

*** Setup

#+BEGIN_SRC emacs-lisp
(use-package projectile
 ;; :after (general ivy)
 :commands
 projectile-mode
 :init
 ;; projectile requires this setting for ivy completion
 (setq
  ;; projectile-indexing-method 'alien
  ;; projectile-completion-system 'ivy
  ;; useful for very large projects
  projectile-enable-caching t
  projectile-sort-order 'recently-active
  projectile-mode-line nil
  projectile-use-git-grep t
  projectile-file-exists-remote-cache-expire (* 10 60)
  projectile-file-exists-local-cache-expire (* 5 60)
  projectile-require-project-root nil
  projectile-globally-ignored-directories
  '(".git" ".svn" ".hg" "_darcs"
    "out" "output" "repl"
    "dist" "dist-newstyle"
    ".vagrant"
    "project" "target" "compiled" ".bundle"
    "*build" "jar"
    "venv" ".virtualenv"
    "*__pycache__*" "*.egg-info"
    ".tox" ".cache" ".cabal-sandbox" ".stack-work"
    ".emacs.d" "elpa" "site-lisp"
    "bin" "eclipse-bin" ".ensime_cache" ".idea"
    ".eunit" ".bzr"
    "vendor" "uploads" "assets"
    "node_modules" "bower_components"
    "_build" ".psci_modules" ".pulp-cache")
  projectile-globally-ignored-files
  '(".DS_Store" "TAGS" ".nrepl-port" "*.gz" "*.pyc" ".purs-repl"
    "*.jar" "*.tar.gz" "*.tgz" "*.zip" "package-lock.json"))
 :config
 ;; use projectile everywhere
 (projectile-mode)
 ;; remove the mode name for projectile-mode, but show the project name
 ;; :delight '(:eval (concat " " (projectile-project-name)))
 :bind-keymap
 ("M-[" . projectile-command-map)
 :diminish projectile-mode)
#+END_SRC

*** Counsel

** Git
*** With editor

*** Magit

*** Evil-Magit

*** Magit todos

*** Forge

*** Git gutter

*** Time machine

*** Syntactic modes

*** Magithub

*** Gist

** Shell
*** Eshell

*** EM-smart

*** Esh help

*** Esh autosuggest

*** EShell toggle

*** VTerm

Install [[libvterm][https://github.com/akermu/emacs-libvterm]].

#+BEGIN_SRC emacs-lisp
(use-package vterm
  :custom
  (vterm-buffer-name-string "vterm %s")
  :init
  (add-hook 'vterm-exit-functions
    (lambda (buffer event)
      (kill-buffer buffer))))
#+END_SRC

** Undo
*** Propose

*** Tree

** SSH
*** Config mode

*** Tramp

*** Counsel-tramp

*** Docker-tramp

*** Vagrant-tramp

*** Kubernetes-tramp

*** Blah

** Smartparens
*** Main

*** Evil

** Snippets
*** Yasnippet

** Org
*** Main

*** Evil

*** Bullets

** LSP
*** Mode

Setup [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]].

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
 :after (general projectile)
 :commands (lsp)
 :init
 ;; Uncomment to inspect communication between client and the server
 (setq lsp-print-io t)
 (setq lsp-prefer-flymake nil)
 :delight "lsp")
#+END_SRC

*** LSP UI

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
 :after (lsp-mode)
 :commands (lsp-ui-mode general)
 :init
 (setq-default
  lsp-ui-doc-frame-parameters
  '((left . -1)
    (top . -1)
    (no-accept-focus . t)
    (min-width . 0)
    (width . 0)
    (min-height . 0)
    (height . 0)
    (internal-border-width . 5)
    (vertical-scroll-bars)
    (horizontal-scroll-bars)
    (left-fringe . 0)
    (right-fringe . 0)
    (menu-bar-lines . 0)
    (tool-bar-lines . 0)
    (line-spacing . 0.1)
    (unsplittable . t)
    (undecorated . t)
    (minibuffer . nil)
    (visibility . nil)
    (mouse-wheel-frame . nil)
    (no-other-frame . t)
    (cursor-type)
    (no-special-glyphs . t)
    (visual-line-mode . -1)))
 :config
 (add-hook 'lsp-mode-hook 'lsp-ui-mode)
 (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
 (add-hook 'lsp-ui-doc-frame-hook
  (lambda (frame _w)
    (set-face-attribute 'default frame :font "Fira Code" :height 110)))
 (setq
  lsp-ui-sideline-enable nil
  lsp-enable-completion-at-point t
  lsp-ui-doc-position 'bottom
  ; lsp-ui-doc-position 'at-point
  lsp-ui-doc-header nil
  lsp-ui-doc-enable nil
  lsp-ui-doc-delay 0.5
  lsp-ui-doc-use-webkit nil
  ;; lsp-ui-doc-max-width 160
  ;; lsp-ui-doc-max-height 20
  ;; lsp-ui-doc-use-childframe t
  lsp-ui-doc-include-signature t
  lsp-ui-doc-border "#222"
  ;; lsp-ui-flycheck-enable t
  lsp-ui-peek-fontify nil
  lsp-ui-peek-expand-function (lambda (xs) (mapcar #'car xs))))
#+END_SRC

*** Company LSP

#+BEGIN_SRC emacs-lisp
(use-package company-lsp
 :after (lsp-mode company)
 ;; :quelpa
 ;; (company-lsp :fetcher github :repo "tigersoldier/company-lsp")
 :commands (company-lsp)
 :init
 (setq
  ;; Don't filter results on the client side
  company-transformers nil
  company-lsp-cache-candidates 'auto
  company-lsp-async t
  company-lsp-enable-snippet t)
 :config
 (push 'company-lsp company-backends))
#+END_SRC

*** Treemacs

#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
 :after (general)
 :commands lsp-treemacs-errors-list)
#+END_SRC

** Languages
*** Lisp

*** Emacs Lisp
**** Mode

**** Refs

**** Macrostep

**** Highlight

*** Haskell
**** Hasklig (ligatures)

**** Mode

**** Hi2

**** Hindent

**** Ormolu

**** Company-cabal

**** Hasky-stack

**** Hasky-extensions

**** LSP

*** PureScript
**** Mode

**** PSC IDE

**** PSCI

*** Idris

*** ATS/ATS2

*** Nix

**** Helpers

*** Ocaml

**** Variables

**** Utop

**** Merlin

**** Tuareg

**** Indentation

**** Dune

**** Flycheck

*** Coq

*** Merlin eldoc

*** Reason

*** SML

*** Scheme

*** Racket

*** Clojure

*** Scala

*** Kotlin

*** Rust

*** Erlang
*** Elixir

*** Prolog

*** Dhall

*** Terraform
**** Mode

**** Company

*** SQL

*** Json

*** Yaml

*** Markdown

*** Emmet

*** Tex

*** Prolog

*** Python

*** Ruby

*** PHP

*** Java

*** Kotlin

*** Groovy

*** Web
**** Mode

**** Company

*** Styling
**** CSS mode

**** LSP-CSS

**** SCSS mode

*** Go

*** TypeScript

*** Flow

*** JavaScript
**** tern

**** npm

**** js2

**** eslintd-fix

**** xref-js2

**** js2-refactor

**** rjxs-mode

**** TODO LSP

**** prettier

**** GraphQL

**** company-tern

*** Vue

*** Elm

*** Nginx

*** D

*** C/C++

*** Objective C

*** Matlab

*** Octave

*** Latex

*** Toml

*** Bison

*** Pug

*** Jade

*** Lua

*** Haml

*** Slim

*** Robots.txt

*** Dotenv

*** CSV

*** Api blueprint

*** NASM

*** IASM

*** BNF

*** Ansible

*** Arduino

*** GLSL

** GDB

** DAP

** HTTP

** Docker

** Kubernetes

** Hydra
*** Install

*** Text scale

*** Window management

** Help

** Infrastructure
*** Net utils

*** IX

** Calendar

** Email

** Reading
*** PDF

*** Djvu

** Translation

** Search
*** Engine mode

*** Google this

*** Stack exchange

** Messaging
*** Prerequisites

*** Slack

*** Telega

=telega.el= is full featured unofficial client for Telegram platform for GNU Emacs.

#+BEGIN_SRC emacs-lisp
(use-package telega
 :requires
 (tracking)
 :config
 (telega-notifications-mode 1)
 (telega-mode-line-mode 1)
 (setq telega-chat-show-deleted-messages-for 'all)
 (setq telega-tdlib-min-version "1.5.0")
 :custom
 (telega-use-tracking-for 'all)
 (telega-chat-prompt-show-avatar-for 'nil)
 :custom-face
 (telega-entity-type-code ((t :family "Iosevka")))
 (telega-entity-type-pre ((t :family "Iosevka")))
 (telega-webpage-fixed ((t :family "Iosevka" :height 0.85)))
 :init
 (add-hook 'telega-chat-mode-hook
   (lambda ()
     (set
       (make-local-variable 'company-backends)
       (append '(telega-company-emoji
                   telega-company-username
                   telega-company-hashtag)
               (when (and telega-chatbuf--chat (telega-chat-bot-p telega-chatbuf--chat))
                     '(telega-company-botcmd))))
     (company-mode 1))))
#+END_SRC

** Pomodoro

** Statistics
*** Uptimes

*** Keyfreq

*** Wakatime

** Delight

** Diminish
